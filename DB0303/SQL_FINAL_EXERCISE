/*Exercise 1: Using Joins*/

/* Question 1: Write and execute a SQL query to list the school names, community names and average attendance 
for communities with a hardship index of 98.*/

SELECT _a.name_of_school, _a.community_area_name, _a.average_student_attendance, _b.hardship_index FROM chicago_public_schools As _a
LEFT JOIN census_data AS _b 
ON _a.community_area_number= _b.community_area_number
WHERe _b.hardship_index= 98;

SELECT *
FROM census_data
WHERE hardship_index= 98;

/* FIND DUPLICATES */

SELECT community_area_number
    ,
    COUNT(community_area_number )
FROM
    census_data
GROUP BY
    community_area_number
HAVING
    COUNT( community_area_number )>  1
ORDER BY
    community_area_number;
	
/*DELETE DUPLICATES WITH TEMP TABLE*/

-- step 1
CREATE TABLE census_data_temp (LIKE census_data);

-- step 2
INSERT INTO census_data_temp
SELECT 
    DISTINCT *
FROM census_data; 

-- step 3
DROP TABLE census_data;

-- step 4
ALTER TABLE census_data_temp 
RENAME TO census_data;                 
	
/* Question 2: Write and execute a SQL query to list all crimes that took place at a school. 
Include case number, crime type and community name.	*/

SELECT _a.case_number,_a.primary_type, _a.location_description, _a.community_area_number,
_b.community_area_name
FROM chicago_crime_data as _a
LEFT JOIN census_data AS _b
ON _a.community_area_number= _b.community_area_number
WHERE _a.location_description LIKE '%SCHOOL%';

--WITH REGULAR EXPRESIONS
--https://towardsdatascience.com/pattern-matching-and-regular-expressions-in-postgresql-cd1fa76e5f3f

SELECT _a.case_number,_a.primary_type, _a.location_description, _a.community_area_number,
_b.community_area_name
FROM chicago_crime_data as _a
LEFT JOIN census_data AS _b
ON _a.community_area_number= _b.community_area_number
WHERE _a.location_description ~ 'SCHOOL';

SELECT _a.case_number,_a.primary_type, _a.location_description, _a.community_area_number,
_b.community_area_name
FROM chicago_crime_data as _a
LEFT JOIN census_data AS _b
ON _a.community_area_number= _b.community_area_number
WHERE _a.location_description ~ 'SCHOOL|APARTMENT';

/*Exercise 2: Creating a View*/

/*Question 1: Write and execute a SQL statement to create a view showing the columns listed 
in the following table, with new column names as shown in the second column. */

DROP VIEW IF EXISTS CHICAGO_PUBLIC_SCHOOLS_VIEW;

CREATE OR REPLACE VIEW CHICAGO_PUBLIC_SCHOOLS_VIEW  AS 
SELECT NAME_OF_SCHOOL AS School_Name ,Safety_Icon AS Safety_Rating , Family_Involvement_Icon AS Family_Rating,
Environment_Icon AS Environment_Rating, Instruction_Icon AS Instruction_Rating, Leaders_Icon AS Leaders_Rating ,
Teachers_Icon AS Teachers_Rating
FROM CHICAGO_PUBLIC_SCHOOLS;

--Write and execute a SQL statement that returns all of the columns from the view.
SELECT * FROM CHICAGO_PUBLIC_SCHOOLS_VIEW;

--Write and execute a SQL statement that returns just the school name and leaders rating from the view.
SELECT school_name, leaders_rating FROM CHICAGO_PUBLIC_SCHOOLS_VIEW;

/*Exercise 3: Creating a Stored Procedure*/

/*Write the structure of a query to create or replace a stored procedure called UPDATE_LEADERS_SCORE that
takes a in_School_ID parameter as an integer and a in_Leader_Score parameter as an integer.*/
/*Inside your stored procedure, write a SQL statement to update the Leaders_Score field in the
CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID to the value in the in_Leader_Score parameter.*/
/*Inside your stored procedure, write a SQL IF statement to update the Leaders_Icon field in the CHICAGO_PUBLIC_SCHOOLS 
table for the school identified by in_School_ID using the following information.*/
/*Run your code to create the stored procedure.*/
/*Write a query to call the stored procedure, passing a valid school ID 
and a leader score of 50, to check that the procedure works as expected.*/
DROP PROCEDURE IF EXISTS UPDATE_LEADERS_SCORE;
CREATE PROCEDURE UPDATE_LEADERS_SCORE ( 
    IN in_School_ID INTEGER, IN in_Leader_Score INTEGER )    
	
LANGUAGE  plpgsql  												
AS $$
BEGIN

		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET Leaders_score = in_Leader_Score
		WHERE School_id= in_School_ID;


	IF in_Leader_Score <= 19 and in_Leader_Score >= 0 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET Leaders_Icon = 'Very weak'
		WHERE School_id= in_School_ID;

	ELSEIF in_Leader_Score <= 39 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET Leaders_Icon = 'Weak'
		WHERE School_id= in_School_ID;
	ELSEIF in_Leader_Score <= 59 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET Leaders_Icon = 'Average'
		WHERE School_id= in_School_ID;		
	ELSEIF in_Leader_Score <= 79 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET Leaders_Icon = 'Strong'
		WHERE School_id= in_School_ID;		
	ELSEIF in_Leader_Score <= 99 THEN
		UPDATE CHICAGO_PUBLIC_SCHOOLS
		SET Leaders_Icon = 'Very strong'
		WHERE School_id= in_School_ID;

	ELSE
	/*
		UPDATE PETSALE
		SET SALEPRICE = SALEPRICE
		WHERE ID = Animal_ID;
	*/
	ROLLBACK;
	
	END IF; 

   COMMIT;
END;$$;

SELECT school_id,  leaders_icon, leaders_score FROM CHICAGO_PUBLIC_SCHOOLS;
/*EXAMPLE 1)  609698 609682*/

SELECT school_id,  leaders_icon, leaders_score FROM CHICAGO_PUBLIC_SCHOOLS
WHERE school_id=  609682;

CALL UPDATE_LEADERS_SCORE(609682,150);

/*EXAMPLE 2 609969*/

SELECT school_id,  leaders_icon, leaders_score FROM CHICAGO_PUBLIC_SCHOOLS
WHERE school_id=  609969;

CALL UPDATE_LEADERS_SCORE(609969,50);

/*Exercise 4: Using Transactions*/

/*Question 1
Update your stored procedure definition. Add a generic ELSE clause to the 
IF statement that rolls back the current work if the score did not fit any 
of the preceding categories.*/

/*Question 2
Update your stored procedure definition again. Add a statement to commit the 
current unit of work at the end of the procedure.*/

/*Run your code to replace the stored procedure.*/

/*Write and run one query to check that the updated stored procedure works
as expected when you use a valid score of 38*/

SELECT school_id,  leaders_icon, leaders_score FROM CHICAGO_PUBLIC_SCHOOLS
WHERE school_id=  609682;

CALL UPDATE_LEADERS_SCORE(609682,38);

/*Write and run another query to check that the updated stored procedure
works as expected when you use an invalid score of 101.*/

SELECT school_id,  leaders_icon, leaders_score FROM CHICAGO_PUBLIC_SCHOOLS
WHERE school_id=  609682;

CALL UPDATE_LEADERS_SCORE(609682,101);